<?php

/**
 * @file
 * Install, update and uninstall functions for the asu_governance module.
 */

use Drupal\user\Entity\Role;
use Drupal\user\Entity\User;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_install().
 *
 * @throws \Exception
 */
function asu_governance_install() {
  // Get the username of the uid 1 user.
  $original_superadmin = User::load(1)?->getAccountName();
  // Save the original superadmin username to config for use later.
  \Drupal::configFactory()->getEditable('asu_secure_superadmin.settings')
    ->set('original_superadmin', $original_superadmin)
    ->save();

  try {
    \Drupal::service('asu_secure_superadmin.change_super_admin_service')
      ->changeSuperAdmin();
    \Drupal::messenger()
      ->addMessage('The superadmin account has been secured.');
  }
  catch (Exception $e) {
    \Drupal::logger('asu_secure_superadmin')->error($e->getMessage());
    \Drupal::messenger()->addError($e->getMessage());
    return;
  }

  // Get the current theme
  $currentTheme = \Drupal::service('theme_handler')->getDefault();
  $config = \Drupal::configFactory()->getEditable('asu_governance.settings');
  $allowableThemes = $config->get('allowable_themes') ?? [];
  if (!in_array($currentTheme, $allowableThemes, TRUE)) {
    $allowableThemes = array_merge($allowableThemes, [$currentTheme]);
    $config->set('allowable_themes', $allowableThemes)->save();
  }

  // Get the module permission loader service.
  $modulePermissionHandler = \Drupal::service('asu_governance.module_permission_handler');

  // Create the Site Builder role if it does not already exist.
  try {
    $modulePermissionHandler->createRole('site_builder', 'Site Builder');
  }
  catch (Exception $e) {
    // Log the error if role creation fails.
    \Drupal::logger('asu_governance')->error('Failed to create Site Builder role: ' . $e->getMessage());
    \Drupal::messenger()->addError(t('Failed to create Site Builder role.'));
    return;
  }

  // Add base permissions to the Site Builder role.
  $modulePermissionHandler->addBasePermissions('site_builder', 'BASE_SB_PERMISSIONS');


  // Create the Content Editor role if it does not already exist.
  try {
    $modulePermissionHandler->createRole('content_editor', 'Content Editor');
  }
  catch (Exception $e) {
    // Log the error if role creation fails.
    \Drupal::logger('asu_governance')->error('Failed to create Content Editor role: ' . $e->getMessage());
    \Drupal::messenger()->addError(t('Failed to create Content Editor role.'));
    return;
  }

  // Add base permissions to the Content Editor role.
  $modulePermissionHandler->addBasePermissions('content_editor', 'BASE_CE_PERMISSIONS');

  // Get the list of allowable modules.
  $allowableModules = \Drupal::config('asu_governance.settings')->get('allowable_modules');
  // Update the Site Builder role's permissions.
  $modulePermissionHandler->addSiteBuilderModulePermissions($allowableModules);
  // Add Site Builder views permissions.
  $modulePermissionHandler->addSiteBuilderViewsPermissions();

  try {
    // Downgrade all users with the 'admin' role to 'site_builder'.
    \Drupal::service('asu_governance.downgrade_admins')->makeSiteBuilders();
  }
  catch (Exception $e) {
    \Drupal::logger('asu_governance')->error($e->getMessage() . PHP_EOL . $e->getTraceAsString());
    \Drupal::messenger()->addError('Could not downgrade administrators' . PHP_EOL . $e->getMessage());
  }

  try {
    // Apply permission blacklist to all roles but 'administrator' and 'site_builder'.
    \Drupal::service('asu_governance.module_permission_handler')->revokeBlacklistedPermissions();
  }
  catch (Exception $e) {
    \Drupal::logger('asu_governance')->error('Could not apply blacklist.' . PHP_EOL . $e->getMessage());
    \Drupal::messenger()->addError('Could not apply blacklist.' . PHP_EOL . $e->getMessage());
    return;
  }

  // Clear caches to ensure all changes are reflected.
  drupal_flush_all_caches();
}

/**
 * Update configs and add Content Editor role.
 */
function asu_governance_update_10000() {
  // Get the extension list service.
  $module_extension_list = \Drupal::service('extension.list.module');
  $path = $module_extension_list->getPath('asu_governance') . '/config/install/asu_governance.settings.yml';
  $yaml_data = Yaml::parse(file_get_contents($path));
  $blacklist = $yaml_data['permissions_blacklist'];

// Update the active configuration to include the base blacklist.
  $config = \Drupal::configFactory()->getEditable('asu_governance.settings');
  $config->set('permissions_blacklist', $blacklist);
  $config->save();

  // Get the module permission loader service.
  $modulePermissionHandler = \Drupal::service('asu_governance.module_permission_handler');
  $roles = Role::loadMultiple();
  if (!in_array('content_editor', array_keys($roles), TRUE)) {
    // Create the Content Editor role if it does not already exist.
    try {
      $modulePermissionHandler->createRole('content_editor', 'Content Editor');
    }
    catch (Exception $e) {
      // Log the error if role creation fails.
      \Drupal::logger('asu_governance')->error('Failed to create Content Editor role: ' . $e->getMessage());
      \Drupal::messenger()->addError(t('Failed to create Content Editor role.'));
      return;
    }

    // Add base permissions to the Site Builder role.
    $modulePermissionHandler->addBasePermissions('content_editor', 'BASE_CE_PERMISSIONS');
  }

}
