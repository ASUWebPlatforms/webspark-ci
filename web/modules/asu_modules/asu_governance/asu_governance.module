<?php

/**
 * @file
 * Primary module hooks for asu_governance module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\user\Entity\Role;
use Drupal\user\RoleInterface;

/**
 * Implements hook_preprocess_page().
 */
function asu_governance_preprocess_page(&$variables) {
  $variables['#attached']['library'][] = 'asu_governance/base';
  $route = \Drupal::routeMatch()->getRouteName();
  $permsArray = \Drupal::service('asu_governance.route_subscriber')::PERMSROUTES;
  $permsArray[] = 'entity.user.collection';
  if (in_array($route, $permsArray, TRUE)) {
    // invalidate the local_task cache tag to allow for dynamic permissions
    \Drupal::service('cache_tags.invalidator')->invalidateTags(['local_task']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the asu_governance_curated_modules form.
 */
function asu_governance_form_asu_governance_curated_modules_alter(&$form, FormStateInterface $form_state) {
  if (isset($form['filters'])) {
    $form['filters']['#attributes']['class'][] = 'modules-table-filter';
    if (isset($form['filters']['text'])) {
      unset($form['filters']['text']['#title_display']);
      $form['filters']['text']['#title'] = t('Filter');
    }
  }

  // Convert module links to action links.
  $modules = $form['modules'] ?? NULL;
  if (isset($modules)) {
    foreach (Element::children($form['modules']) as $key) {
      $link_key_to_action_link_type = [
        'help' => 'questionmark',
        'permissions' => 'key',
        'configure' => 'cog',
      ];
      if (isset($form['modules'][$key]['#type']) && $form['modules'][$key]['#type'] === 'details') {
        $form['modules'][$key]['#module_package_listing'] = TRUE;
        foreach (Element::children($form['modules'][$key]) as $module_key) {
          if (isset($form['modules'][$key][$module_key]['links'])) {
            foreach ($form['modules'][$key][$module_key]['links'] as $link_key => &$link) {
              if (array_key_exists($link_key, $link_key_to_action_link_type)) {
                $action_link_type = $link_key_to_action_link_type[$link_key];
                $link['#options']['attributes']['class'][] = 'action-link';
                $link['#options']['attributes']['class'][] = 'action-link--small';
                $link['#options']['attributes']['class'][] = "action-link--icon-$action_link_type";
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_help().
 */
function asu_governance_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'asu_governance.modules_list':
      $output = '<p>' . t('Always run the <a href=":update-php">update script</a> each time a module is updated.', [':update-php' => Url::fromRoute('system.db_update')->toString()]) . '</p>';
      return $output;

    case 'asu_governance.modules_uninstall':
      return '<p>' . t('The uninstall process removes all data related to a module.') . '</p>';

    case 'asu_governance.themes_page':
      $output = '<p>' . t('Set and configure the default theme for your website.') . '</p>';
      if (\Drupal::moduleHandler()->moduleExists('block')) {
        $output .= '<p>' . t('You can place blocks for each theme on the <a href=":blocks">block layout</a> page.', [':blocks' => Url::fromRoute('block.admin_display')->toString()]) . '</p>';
      }
      return $output;

    case 'system.theme_settings_theme':
      $theme_list = \Drupal::service('theme_handler')->listInfo();
      $theme = $theme_list[$route_match->getParameter('theme')];
      return '<p>' . t('These options control the display settings for the %name theme. When your site is displayed using this theme, these settings will be used.', ['%name' => $theme->info['name']]) . '</p>';
  }
  return null;
}

/**
 * Implements hook_preprocess_HOOK() for links.
 */
function asu_governance_preprocess_links(&$variables) {
  $admin_theme = \Drupal::theme()->getActiveTheme()->getName();
  if ($admin_theme === 'claro') {
    // Convert links to action links.
    foreach ($variables['links'] as $links_item) {
      if (!empty($links_item['link']) && !empty($links_item['link']['#url']) && $links_item['link']['#url'] instanceof Url) {
        if ($links_item['link']['#url']->isRouted()) {
          switch ($links_item['link']['#url']->getRouteName()) {
            case 'asu_governance.theme_settings_theme':
              $links_item['link'] = _claro_convert_link_to_action_link($links_item['link'], 'cog', 'small');
              break;

            case 'asu_governance.theme_uninstall':
              $links_item['link'] = _claro_convert_link_to_action_link($links_item['link'], 'ex', 'small');
              break;

            case 'asu_governance.theme_set_default':
              $links_item['link'] = _claro_convert_link_to_action_link($links_item['link'], 'checkmark', 'small');
              break;

            case 'asu_governance.theme_install':
              $links_item['link'] = _claro_convert_link_to_action_link($links_item['link'], 'plus', 'small');
              break;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function asu_governance_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!\Drupal::currentUser()->hasRole('administrator')) {
    // Disable the administrator option from the roles list for non-admin users.
    $form['account']['roles']['administrator'] = [
      '#disabled' => TRUE,
    ];
  }
  // Disable the Status field on the etsuper account
  if ($form['account']['name']['#default_value'] === 'etsuper') {
    $form['account']['status']['#disabled'] = TRUE;
  }
}

/**
 * Implements hook_form_alter().
 */
function asu_governance_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $current_user = \Drupal::currentUser();
  if ($form_id === 'views_form_user_admin_people_page_1' && $current_user->hasRole('administrator')) {
    // Prevent non-admins from performing operations on the Administrator role.
    $options = $form["header"]["user_bulk_form"]["action"]["#options"];
    foreach ($options as $key => $value) {
      if (str_contains($value, 'Administrator')) {
        unset($form["header"]["user_bulk_form"]["action"]["#options"][$key]);
      }
      // Prevent non-admins from unblocking etsuper.
      if (str_contains($value, 'Unblock')) {
        unset($form["header"]["user_bulk_form"]["action"]["#options"][$key]);
      }
    }
  }
  if ($form_id === 'bulk_add_cas_users' && !$current_user->hasRole('administrator')) {
    // Disable the administrator option from the roles list for non-admin users.
    $form['roles']['administrator'] = [
      '#disabled' => TRUE,
    ];
  }
  if ($form_id === 'cas_settings') {
    $adminKey = array_key_exists('administrator', $form['user_accounts']['auto_assigned_roles']['#options']);
    if ($adminKey && !$current_user->hasRole('administrator')) {
      unset($form['user_accounts']['auto_assigned_roles']['#options']['administrator']);
    }
  }
  $permsArray = \Drupal::service('asu_governance.route_subscriber')::PERMSROUTES;
  // replace periods with underscores for all items in the array
  $permsArrayFormIds = array_map(function ($item) {
    return str_replace('.', '_', $item);
  }, $permsArray);
  if (in_array($form_id, $permsArrayFormIds, TRUE) && !$current_user->hasRole('administrator')) {
    $blacklist = \Drupal::service('asu_governance.module_permission_handler')::BLACKLIST;
    foreach ($blacklist as $permission) {
      if (isset($form['permissions'][$permission])) {
        $form['permissions'][$permission]['#disabled'] = TRUE;
      }
    }
  }
}
