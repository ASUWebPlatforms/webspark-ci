<?php

use Drupal\block_content\Entity\BlockContent;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\Node;

/**
 * @file
 * Install, update and uninstall functions for the Web Directory Component module.
 */

/**
 * Updates the Department field label (ASUIS-474).
 */
function webspark_webdir_update_9001(&$sandbox)
{
  $module_cfg = \Drupal::configFactory()
    ->getEditable('field.field.block_content.web_directory.field_department_ids');

  $module_cfg->set('label', 'Departments')->save();
}

/**
 * Removes field form conditions (ASUIS-501).
 */
function webspark_webdir_update_9002(&$sandbox) {
  $module_cfg = \Drupal::configFactory()
    ->getEditable('core.entity_form_display.block_content.web_directory.default');
  $keys = [
    'content',
    'field_component_type',
    'third_party_settings',
    'field_states_ui',
  ];

  $keys1 = $keys;

  $keys1[] = 'form';
  $keys1[] = 'list';

  $key1 = implode('.', $keys1);

  $module_cfg->set($key1, '');

  $keys2 = $keys;
  $keys2[] = 'field_states';

  $key2 = implode('.', $keys2);

  $module_cfg->clear($key2);

  $module_cfg->save();
}

/**
 * Updates the filter fields descriptions (ASUIS-492).
 */
function webspark_webdir_update_9003(&$sandbox)
{
  $module_cfg_title = \Drupal::configFactory()
    ->getEditable('field.field.block_content.web_directory.field_filter_title');
  $module_cfg_title->set('description', '<i><small>Add one title per row. Title match is case-sensitive. Profiles displayed must match one of these titles.</small></i>')
    ->save();

  $module_cfg_campus = \Drupal::configFactory()
    ->getEditable('field.field.block_content.web_directory.field_filter_campus');
  $module_cfg_campus->set('description', '<i><small>Only display profiles with a primary job campus matching one of these campuses.</small></i>')
    ->save();

  $module_cfg_employee = \Drupal::configFactory()
    ->getEditable('field.field.block_content.web_directory.field_filter_employee');
  $module_cfg_employee->set('description', '<i><small>Only display profiles with a primary employee class matching one of these employee types.</small></i>')
    ->save();

  $module_cfg_expertise = \Drupal::configFactory()
    ->getEditable('field.field.block_content.web_directory.field_filter_expertise');
  $module_cfg_expertise->set('description', '<i><small>Display profiles with at least one matching expertise area.</small></i>')
    ->save();
}

/**
 * Fix filter title markup (ASUIS-758).
 */
function webspark_webdir_update_9004(&$sandbox) {
  $module_cfg_title = \Drupal::configFactory()
    ->getEditable('field.field.block_content.web_directory.field_filter_title');
  $module_cfg_title->set('description', 'Add one title per row. Title match is case-sensitive. Profiles displayed must match one of these titles.')
    ->save();
}

/**
 * Revert all the module config.
 */
function webspark_webdir_update_9005(&$sandbox) {
  _webspark_webdir_revert_all_module_config();
}

/**
 * Revert all the module's configs.
 */
function webspark_webdir_update_9006(&$sandbox) {
  _webspark_webdir_revert_all_module_config();
}

/**
 * Create the "field_ids", "field_show_title", and "field_news_items_to_display" field replacements.
 */
function webspark_webdir_update_9007() {
  // Hold the fields to create.
  $fields = [
    'field_webdir_exclude_profiles' => 'string',
    'field_webdir_use_pager' => 'boolean',
    'field_webdir_items_to_display' => 'integer',
  ];

  // Ensure that the block type exists.
  $block_type = \Drupal::entityTypeManager()->getStorage('block_content_type')->load('web_directory');

  if (!$block_type) {
    throw new EntityStorageException('Block type web_directory not found.');
  }

  // Create each field if it doesn't already exist.
  foreach ($fields as $field_name => $type) {
    if (!FieldStorageConfig::loadByName('block_content', $field_name)) {
      FieldStorageConfig::create([
        'field_name' => $field_name,
        'entity_type' => 'block_content',
        'bundle' => 'web_directory',
        'type' => $type,
        'cardinality' => 1,
      ])->save();
    }
  }
}

/**
 * Update the new fields created in 9007 with the values from the old ones.
 */
// function webspark_webdir_update_9008(&$sandbox) {
//   $fields = [
//     'field_ids' => 'field_webdir_exclude_profiles',
//     'field_show_title' => 'field_webdir_use_pager',
//     'field_news_items_to_display' => 'field_webdir_items_to_display',
//   ];

//   // First we get the block IDs.
//   $block_ids = \Drupal::entityQuery('block_content')
//       ->accessCheck(FALSE)
//       ->execute();

//   foreach ($block_ids as $block_id) {
//     $block = BlockContent::load($block_id);
//     foreach ($fields as $old_field => $new_field) {
//       if (isset($block->{$old_field}->value)) {
//         $block->{$new_field}->value = $block->{$old_field}->value;
//         $block->save();
//       }
//     }
//   }
// }

/**
 * Delete the old fields, and uninstall the old module.
 */
// function webspark_webdir_update_9009(&$sandbox) {
//   $old_fields = [
//     'field_ids',
//     'field_show_title',
//     'field_news_items_to_display',
//   ];

//   foreach ($old_fields as $old_field) {
//     if ($field_storage = FieldStorageConfig::loadByName('block_content', $old_field)) {
//       $field_storage->delete();
//     }
//   }
// }

/**
 * Uninstall the old module.
 */
// function webspark_webdir_update_9010(&$sandbox) {
//   // If the old module is installed, uninstall it
//   if (\Drupal::moduleHandler()->moduleExists('webspark_isearch')) {
//     \Drupal::service('module_installer')->uninstall(['webspark_isearch']);
//   }
// }

function _webspark_webdir_revert_all_module_config() {
  // Get this module name.
  $module = \Drupal::service('module_handler')
    ->getModule(basename(__FILE__, '.install'))
    ->getName();

  // Unlock the configuration storage.
  \Drupal::state()->set('configuration_locked', FALSE);

  // Revert all configs from this module.
  \Drupal::service('webspark.config_manager')->revertAll($module);

  // Lock the configuration storage.
  \Drupal::state()->set('configuration_locked', TRUE);
}
