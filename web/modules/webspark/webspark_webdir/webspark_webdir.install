<?php

use Drupal\block_content\Entity\BlockContent;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\Node;
use Drupal\layout_builder\SectionStorage\SectionStorageTrait;
use Drupal\layout_builder\SectionStorageInterface;

/**
 * @file
 * Install, update and uninstall functions for the Web Directory Component module.
 */

/**
 * Updates the Department field label (ASUIS-474).
 */
function webspark_webdir_update_9001(&$sandbox)
{
  $module_cfg = \Drupal::configFactory()
    ->getEditable('field.field.block_content.web_directory.field_department_ids');

  $module_cfg->set('label', 'Departments')->save();
}

/**
 * Removes field form conditions (ASUIS-501).
 */
function webspark_webdir_update_9002(&$sandbox) {
  $module_cfg = \Drupal::configFactory()
    ->getEditable('core.entity_form_display.block_content.web_directory.default');
  $keys = [
    'content',
    'field_component_type',
    'third_party_settings',
    'field_states_ui',
  ];

  $keys1 = $keys;

  $keys1[] = 'form';
  $keys1[] = 'list';

  $key1 = implode('.', $keys1);

  $module_cfg->set($key1, '');

  $keys2 = $keys;
  $keys2[] = 'field_states';

  $key2 = implode('.', $keys2);

  $module_cfg->clear($key2);

  $module_cfg->save();
}

/**
 * Updates the filter fields descriptions (ASUIS-492).
 */
function webspark_webdir_update_9003(&$sandbox)
{
  $module_cfg_title = \Drupal::configFactory()
    ->getEditable('field.field.block_content.web_directory.field_filter_title');
  $module_cfg_title->set('description', '<i><small>Add one title per row. Title match is case-sensitive. Profiles displayed must match one of these titles.</small></i>')
    ->save();

  $module_cfg_campus = \Drupal::configFactory()
    ->getEditable('field.field.block_content.web_directory.field_filter_campus');
  $module_cfg_campus->set('description', '<i><small>Only display profiles with a primary job campus matching one of these campuses.</small></i>')
    ->save();

  $module_cfg_employee = \Drupal::configFactory()
    ->getEditable('field.field.block_content.web_directory.field_filter_employee');
  $module_cfg_employee->set('description', '<i><small>Only display profiles with a primary employee class matching one of these employee types.</small></i>')
    ->save();

  $module_cfg_expertise = \Drupal::configFactory()
    ->getEditable('field.field.block_content.web_directory.field_filter_expertise');
  $module_cfg_expertise->set('description', '<i><small>Display profiles with at least one matching expertise area.</small></i>')
    ->save();
}

/**
 * Fix filter title markup (ASUIS-758).
 */
function webspark_webdir_update_9004(&$sandbox) {
  $module_cfg_title = \Drupal::configFactory()
    ->getEditable('field.field.block_content.web_directory.field_filter_title');
  $module_cfg_title->set('description', 'Add one title per row. Title match is case-sensitive. Profiles displayed must match one of these titles.')
    ->save();
}

/**
 * Revert all the module config.
 */
function webspark_webdir_update_9005(&$sandbox) {
  _webspark_webdir_revert_all_module_config();
}

/**
 * Revert all the module's configs.
 */
function webspark_webdir_update_9006(&$sandbox) {
  _webspark_webdir_revert_all_module_config();
}

/**
 * Create the "field_ids", "field_show_title", and "field_news_items_to_display" field replacements.
 */
function webspark_webdir_update_9007() {
  _webspark_webdir_revert_all_module_config();
}

/**
 * Update the new fields created in 9007 with the values from the old ones.
 */
function webspark_webdir_update_9008() {
  // Map the old fields to the new
  $fields = [
    'field_ids' => 'field_webdir_exclude_profiles',
    'field_show_title' => 'field_webdir_use_pager',
    'field_news_items_to_display' => 'field_webdir_items_to_display',
  ];

  // Load all nodes that contain the 'inline_block:web_directory' block and the block itself.
  $blocks = _webspark_webdir_get_blocks();

  foreach ($blocks as $nid => $block) {
    // Copy the values from the old fields to the new ones.
    foreach ($fields as $old_field => $new_field) {
      if ($block->hasField($old_field) && !$block->get($old_field)->isEmpty()) {
        $block->{$new_field}->value = $block->{$old_field}->value;
      }
    }

    $block->save();
  }
}

/**
 * Delete the old fields, and uninstall the old module.
 */
// function webspark_webdir_update_9009(&$sandbox) {
//   $old_fields = [
//     'field_ids',
//     'field_show_title',
//     'field_news_items_to_display',
//   ];

//   foreach ($old_fields as $old_field) {
//     if ($field_storage = FieldStorageConfig::loadByName('block_content', $old_field)) {
//       $field_storage->delete();
//     }
//   }
// }

/**
 * Uninstall the old module.
 */
// function webspark_webdir_update_9010(&$sandbox) {
//   // If the old module is installed, uninstall it
//   if (\Drupal::moduleHandler()->moduleExists('webspark_isearch')) {
//     \Drupal::service('module_installer')->uninstall(['webspark_isearch']);
//   }
// }

/**
 * Helper function to get node IDs of nodes using the "inline_block:web_directory" block
 */
function _webspark_webdir_get_blocks() {
  $nodes_and_blocks = [];
  $nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties(['type' => 'page']);

  foreach ($nodes as $node) {
    if ($node->hasField('layout_builder__layout') && !$node->get('layout_builder__layout')->isEmpty()) {
      $sections = $node->get('layout_builder__layout')->getValue();
      foreach ($sections as $section_item) {
        $section = $section_item['section'];
        foreach ($section->getComponents() as $component) {
          $component_config = $component->get('configuration');
          if (isset($component_config['id']) && $component_config['id'] == 'inline_block:web_directory') {
            if (isset($component_config['block_revision_id'])) {
              // Load the block content from the revision id.
              $block = \Drupal::entityTypeManager()->getStorage('block_content')->loadRevision($component_config['block_revision_id']);
              if ($block) {
                // Add the block to the array with the node ID as the key.
                $nodes_and_blocks[$node->id()] = $block;
                // Stop processing this node, we found what we wanted.
                break 2;
              }
            }
          }
        }
      }
    }
  }

  return $nodes_and_blocks;
}

function _webspark_webdir_revert_all_module_config() {
  // Get this module name.
  $module = \Drupal::service('module_handler')
    ->getModule(basename(__FILE__, '.install'))
    ->getName();

  // Unlock the configuration storage.
  \Drupal::state()->set('configuration_locked', FALSE);

  // Revert all configs from this module.
  \Drupal::service('webspark.config_manager')->revertAll($module);

  // Lock the configuration storage.
  \Drupal::state()->set('configuration_locked', TRUE);
}
